#!/usr/bin/env bash
npm_flag="--no-git-tag-version"
COLUMNS=1
version_file="VERSION"
master_file="kes.user.js"
funcs_file="helpers/funcs.js"
manifest="helpers/manifest.json"
vers=$(< $version_file)
branch=$(git name-rev --name-only HEAD)
    opts=(
            "MAJOR (breaking API change)"
            "MINOR (feature)"
            "PATCH (hotfix)"
            "chore (static docs/task/file manipulation)"
         )
bump_npm(){
    case "$1" in
        "prerelease")
            npm version "$1" --preid=rc "$npm_flag"
            ;;
        "beta")
            npm version "$1" --preid=beta "$npm_flag"
            ;;
        *)
            npm version "$1" "$npm_flag"
            ;;
        esac
}
bump_vers(){
    [[ $1 == chore ]] && return
    local ma=$(<<< "$vers" sed 's/\([0-9]\+\)\(.\)\([0-9]\+\)\(.\)\([0-9]\+\)/\1/g')
    local mi=$(<<< "$vers" sed 's/\([0-9]\+\)\(.\)\([0-9]\+\)\(.\)\([0-9]\+\)/\3/g')
    local pa=$(<<< "$vers" sed 's/\([0-9]\+\)\(.\)\([0-9]\+\)\(.\)\([0-9]\+\)/\5/g')
    if [[ $branch == "main" ]]; then
        bump_npm "$1"
        case $1 in
            "major")
            ma=$((ma+1))
            mi=0
            pa=0
            ;;
        "minor")
            mi=$((mi+1))
            pa=0
            ;;
        "patch")
            pa=$((pa+1))
            ;;
        esac
        local newvers="${ma}.${mi}.${pa}"
    elif [[ $branch =~ ^release/ ]]; then
        local inc=$(<<< "$vers" awk -F"." '{print $4}')
        local pref=$(<<< "$vers" awk -F"-" '{print $1}')
        newvers="${pref}-rc.$((inc+1))"
        bump_npm prerelease
    else
        local inc=$(<<< "$vers" awk -F"." '{print $4}')
        local pref=$(<<< "$vers" awk -F"-" '{print $1}')
        newvers="${pref}-beta.$((inc+1))"
    fi
        echo "$newvers" > $version_file
        ./build/scripts/gen_manifest.sh
        ./build/scripts/gen_kes.sh
        ./build/scripts/concat_funcs
        echo
        echo "HOOK========>Bumping version from $vers to $newvers"
        echo
        git add $manifest
        git add $version_file
        git add $master_file
        git add "$funcs_file"
}

echo "This commit change is of type:"
select opt in "${opts[@]}"; do
case $opt in
${opts[0]}) bump_vers major ;;
${opts[1]}) bump_vers minor ;;
${opts[2]}) bump_vers patch ;;
${opts[3]}) : ;;
esac
break
done < /dev/tty
